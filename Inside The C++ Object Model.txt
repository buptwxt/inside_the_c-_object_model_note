# 深度探索c++对象模型读书笔记

## 前言
构造函数、析构函数、虚拟函数、继承多态，编译器做了太多的工作
对c++对象模型的了解，可以写出比较没有错误倾向而且比较有效率的代码

什么是c++对象模型？
1、语言中直接支持面向对象程序设计的部分
2、对于各种支持的底层实现机制 

对象模型中一个“不变量”
virtual functions在编译时期就固定下来了，程序员没有办法在执行期动态增加或取代其中某一个。这使得虚拟调用操作得以有快速的派送（dispatch）结果，付出的成本则是执行期的弹性。
虚函数是对象模型中一个很重要的概念，虚函数不一定要通过类、虚函数表实现。不过目前所有编译器对于virtual function实现法都是使用class专属的virtual table，大小固定，并且在程序执行前就构造好了。

如果程序员了解底层实现模型，他就能够写出效率较高的代码，自省心也比较高。

c++并非天生庞大又迟缓，c++在抽象性和实际性之间找到平衡点，需要知识、经验，以及许多思考，c++的使用需要付出许多心力，但是我的经验告诉我，这项投资的报酬率相当高。

## 章节描述
1、第一章，对象基本概念
2、构造函数语义学
3、Data语义学
4、Function语义学
5、构造、析构、拷贝语义学
6、执行期语义学：对象生命周期、new delete支持
7、异常、模板、runtime type identification

## 导读
c++ 老手：
1、语言用得烂熟、OO观念好
2、对于底层机制了解

对象模型是深层次结构的知识，关系到“与语言无关、与平台无关、跨网络可执行”的基础原理，对各种写法所带来的效率利益有通盘的认识。

